@page "/GameHost/{Name}/{SessionId}"
@using GamePad.Web.Components.BaseComponents
@using GamePad.Web.Components.BasePages
@using GamePad.Web.Components.Games
@using GamePad.Web.Components.Management
@inherits Client
@inject EmptyGame1 emptyGame1 // Injecting the games. TODO: does this even work?
@inject EmptyGame2 emptyGame2
@inject TanksTutorial tanksTutorial
@rendermode InteractiveServer

<PageTitle>GameHost</PageTitle>

<h1>Hosting session: @this.Session.Name</h1>

<div style="display: flex; height: 100%;">
    <!-- Left div -->
    <!-- DI did not work somehow. TODO: figure out DI here -->
    @switch (this.Session.GameInfo.Name)
    {
        case "EmptyGame1":
            <EmptyGame1 @ref=activeGame />
            break;
        case "EmptyGame2":
            <EmptyGame2 @ref=activeGame />
            break;
        case "TanksTutorial":
            <TanksTutorial @ref=activeGame />
            break;
        default:
            <EmptyGame1 @ref=activeGame />
            break;
    }
    <!-- Right div -->
    <div style="width: 200px; background-color: lightgreen; display: flex; flex-direction: column;">
        <!-- Loop to generate buttons -->
        @for (int i = 0; i < Session.Controllers.Length; i++)
        {
            var j = i;
            if (Session.Controllers[j] == null)
            {
                <button style="margin-bottom: 10px;" disabled>empty spot</button>
            }
            else
            {
                <button style="margin-bottom: 10px;" @onclick="() => KickPlayer(Session.Controllers[j]!)">Kick: @Session.Controllers[j]!.Name</button>
            }
        }
    </div>
</div>

@code {
    private Game activeGame;

    public EventHandler? PlayerKicked;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Session.Initialize(this);
        this.Session.PlayerJoined += OnPlayersChanged;
        this.Session.PlayerLeft += OnPlayersChanged;
        this.Session.GameCommandReceived += OnGameCommandReceived;
    }

    private Game ChooseGame()
    {
        // TODO: use this for DI, unclear when to assign so it's not disposed and render handle is avaiable
        return (this.Session.GameInfo.Name) switch
        {
            "EmptyGame1" => emptyGame1,
            "EmptyGame2" => emptyGame2,
            "TanksTutorial" => tanksTutorial,
            _ => emptyGame1
        };
    }

    private void KickPlayer(Controller controller)
    {
        PlayerKicked?.Invoke(controller, EventArgs.Empty);
    }

    public void OnPlayersChanged(object? sender, EventArgs e)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    public void OnGameCommandReceived(object? sender, GameCommandEventArgs e)
    {
        this.activeGame.HandleGameCommand(sender, e);
    }
}
