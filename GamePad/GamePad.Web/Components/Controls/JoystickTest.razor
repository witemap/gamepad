@inject IJSRuntime JSRuntime
<div class="row">
			<div class="columnLateral">
				<div id="joy1Div" style="width:200px;height:200px;margin:50px"></div>
				Position X:<input id="joy1PosizioneX" type="text" /><br />
				Position Y:<input id="joy1PosizioneY" type="text" /><br />
				Direction:<input id="joy1Direzione" type="text" /><br />
				X :<input id="joy1X" type="text" /><br />
				Y :<input id="joy1Y" type="text" /><br />
                aditest :<input id="aditest" type="text"/>
			</div>		
</div>

<script type="text/javascript">
    let StickStatus =
    {
        xPosition: 0,
        yPosition: 0,
        x: 0,
        y: 0,
        cardinalDirection: "C",
        oldCardinalDirection: "C"
    };

    /**

     *  title {String} (optional) - The ID of canvas (Default value is 'joystick')
     *  width {Int} (optional) - The width of canvas, if not specified is setted at width of container object (Default value is the width of container object)
     *  height {Int} (optional) - The height of canvas, if not specified is setted at height of container object (Default value is the height of container object)
     *  internalFillColor {String} (optional) - Internal color of Stick (Default value is '#00AA00')
     *  internalLineWidth {Int} (optional) - Border width of Stick (Default value is 2)
     *  internalStrokeColor {String}(optional) - Border color of Stick (Default value is '#003300')
     *  externalLineWidth {Int} (optional) - External reference circonference width (Default value is 2)
     *  externalStrokeColor {String} (optional) - External reference circonference color (Default value is '#008000')
     *  autoReturnToCenter {Bool} (optional) - Sets the behavior of the stick, whether or not, it should return to zero position when released (Default value is True and return to zero)
     */
    var JoyStick = (function (container, parameters, callback) {
        parameters = parameters || {};
        var title = (typeof parameters.title === "undefined" ? "joystick" : parameters.title),
            width = (typeof parameters.width === "undefined" ? 0 : parameters.width),
            height = (typeof parameters.height === "undefined" ? 0 : parameters.height),
            internalFillColor = (typeof parameters.internalFillColor === "undefined" ? "#00AA00" : parameters.internalFillColor),
            internalLineWidth = (typeof parameters.internalLineWidth === "undefined" ? 2 : parameters.internalLineWidth),
            internalStrokeColor = (typeof parameters.internalStrokeColor === "undefined" ? "#003300" : parameters.internalStrokeColor),
            externalLineWidth = (typeof parameters.externalLineWidth === "undefined" ? 2 : parameters.externalLineWidth),
            externalStrokeColor = (typeof parameters.externalStrokeColor === "undefined" ? "#008000" : parameters.externalStrokeColor),
            autoReturnToCenter = (typeof parameters.autoReturnToCenter === "undefined" ? true : parameters.autoReturnToCenter);

        callback = callback || function (StickStatus) { };

        // Create Canvas element and add it in the Container object
        var objContainer = document.getElementById(container);

        // Fixing Unable to preventDefault inside passive event listener due to target being treated as passive in Chrome [Thanks to https://github.com/artisticfox8 for this suggestion]
        objContainer.style.touchAction = "none";

        var canvas = document.createElement("canvas");
        canvas.id = title;
        if (width === 0) { width = objContainer.clientWidth; }
        if (height === 0) { height = objContainer.clientHeight; }
        canvas.width = width;
        canvas.height = height;
        objContainer.appendChild(canvas);
        var context = canvas.getContext("2d");

        var pressed = 0; // Bool - 1=Yes - 0=No
        var circumference = 2 * Math.PI;
        var internalRadius = (canvas.width - ((canvas.width / 2) + 10)) / 2;
        var maxMoveStick = internalRadius + 5;
        var externalRadius = internalRadius + 30;
        var centerX = canvas.width / 2;
        var centerY = canvas.height / 2;
        var directionHorizontalLimitPos = canvas.width / 10;
        var directionHorizontalLimitNeg = directionHorizontalLimitPos * -1;
        var directionVerticalLimitPos = canvas.height / 10;
        var directionVerticalLimitNeg = directionVerticalLimitPos * -1;
        // Used to save current position of stick
        var movedX = centerX;
        var movedY = centerY;

        // Check if the device support the touch or not
        if ("ontouchstart" in document.documentElement) {
            canvas.addEventListener("touchstart", onTouchStart, false);
            document.addEventListener("touchmove", onTouchMove, false);
            document.addEventListener("touchend", onTouchEnd, false);
        }
        else {
            canvas.addEventListener("mousedown", onMouseDown, false);
            document.addEventListener("mousemove", onMouseMove, false);
            document.addEventListener("mouseup", onMouseUp, false);
        }
        // Draw the object
        drawExternal();
        drawInternal();

        /******************************************************
         * Private methods
         *****************************************************/

        function drawExternal() {
            context.beginPath();
            context.arc(centerX, centerY, externalRadius, 0, circumference, false);
            context.lineWidth = externalLineWidth;
            context.strokeStyle = externalStrokeColor;
            context.stroke();
        }

        function drawInternal() {
            context.beginPath();
            if (movedX < internalRadius) { movedX = maxMoveStick; }
            if ((movedX + internalRadius) > canvas.width) { movedX = canvas.width - (maxMoveStick); }
            if (movedY < internalRadius) { movedY = maxMoveStick; }
            if ((movedY + internalRadius) > canvas.height) { movedY = canvas.height - (maxMoveStick); }
            context.arc(movedX, movedY, internalRadius, 0, circumference, false);
            // create radial gradient
            var grd = context.createRadialGradient(centerX, centerY, 5, centerX, centerY, 200);
            // Light color
            grd.addColorStop(0, internalFillColor);
            // Dark color
            grd.addColorStop(1, internalStrokeColor);
            context.fillStyle = grd;
            context.fill();
            context.lineWidth = internalLineWidth;
            context.strokeStyle = internalStrokeColor;
            context.stroke();
        }

        let touchId = null;
        function onTouchStart(event) {
            pressed = 1;
            touchId = event.targetTouches[0].identifier;
        }

        function onTouchMove(event) {
            if (pressed === 1 && event.targetTouches[0].target === canvas) {
                movedX = event.targetTouches[0].pageX;
                movedY = event.targetTouches[0].pageY;
                // Manage offset
                if (canvas.offsetParent.tagName.toUpperCase() === "BODY") {
                    movedX -= canvas.offsetLeft;
                    movedY -= canvas.offsetTop;
                }
                else {
                    movedX -= canvas.offsetParent.offsetLeft;
                    movedY -= canvas.offsetParent.offsetTop;
                }
                // Delete canvas
                context.clearRect(0, 0, canvas.width, canvas.height);
                // Redraw object
                drawExternal();
                drawInternal();

                // Set attribute of callback
                StickStatus.xPosition = movedX;
                StickStatus.yPosition = movedY;
                StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed();
                StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed();
                StickStatus.cardinalDirection = getCardinalDirection();
                callback(StickStatus);
            }
        }

        function onTouchEnd(event) {
            if (event.changedTouches[0].identifier !== touchId) return;

            pressed = 0;
            // If required reset position store variable
            if (autoReturnToCenter) {
                movedX = centerX;
                movedY = centerY;
            }
            // Delete canvas
            context.clearRect(0, 0, canvas.width, canvas.height);
            // Redraw object
            drawExternal();
            drawInternal();

            // Set attribute of callback
            StickStatus.xPosition = movedX;
            StickStatus.yPosition = movedY;
            StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed();
            StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed();
            StickStatus.cardinalDirection = getCardinalDirection();
            callback(StickStatus);
        }

        function onMouseDown(event) {
            pressed = 1;
        }

        /* To simplify this code there was a new experimental feature here: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX , but it present only in Mouse case not metod presents in Touch case :-( */
        function onMouseMove(event) {
            if (pressed === 1) {
                movedX = event.pageX;
                movedY = event.pageY;

                // Manage offset
                movedX -= canvas.offsetLeft;
                movedY -= canvas.offsetTop;


                // Delete canvas
                context.clearRect(0, 0, canvas.width, canvas.height);
                // Redraw object
                drawExternal();
                drawInternal();

                // Set attribute of callback
                StickStatus.xPosition = movedX;
                StickStatus.yPosition = movedY;
                StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed();
                StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed();
                StickStatus.cardinalDirection = getCardinalDirection();
                callback(StickStatus);
            }
        }

        function onMouseUp(event) {
            pressed = 0;
            // If required reset position store variable
            if (autoReturnToCenter) {
                movedX = centerX;
                movedY = centerY;
            }
            // Delete canvas
            context.clearRect(0, 0, canvas.width, canvas.height);
            // Redraw object
            drawExternal();
            drawInternal();

            // Set attribute of callback
            StickStatus.xPosition = movedX;
            StickStatus.yPosition = movedY;
            StickStatus.x = (100 * ((movedX - centerX) / maxMoveStick)).toFixed();
            StickStatus.y = ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed();
            StickStatus.cardinalDirection = getCardinalDirection();
            callback(StickStatus);
        }

        function getCardinalDirection() {
            let result = "";
            let orizontal = movedX - centerX;
            let vertical = movedY - centerY;

            if (vertical >= directionVerticalLimitNeg && vertical <= directionVerticalLimitPos) {
                result = "C";
            }
            if (vertical < directionVerticalLimitNeg) {
                result = "W";
            }
            if (vertical > directionVerticalLimitPos) {
                result = "S";
            }

            if (orizontal < directionHorizontalLimitNeg) {
                if (result === "C") {
                    result = "A";
                }
                else {
                    result += "A";
                }
            }
            if (orizontal > directionHorizontalLimitPos) {
                if (result === "C") {
                    result = "D";
                }
                else {
                    result += "D";
                }
            }

            return result;
        }

        /******************************************************
         * Public methods
         *****************************************************/

        this.GetWidth = function () {
            return canvas.width;
        };

        this.GetHeight = function () {
            return canvas.height;
        };

        this.GetPosX = function () {
            return movedX;
        };

        this.GetPosY = function () {
            return movedY;
        };

        this.GetX = function () {
            return (100 * ((movedX - centerX) / maxMoveStick)).toFixed();
        };

        this.GetY = function () {
            return ((100 * ((movedY - centerY) / maxMoveStick)) * -1).toFixed();
        };

        this.GetDir = function () {
            return getCardinalDirection();
        };
    });


	// Create JoyStick object into the DIV 'joy1Div'
	//var Joy1 = new JoyStick('joy1Div');

	var joy1IinputPosX = document.getElementById("joy1PosizioneX");
	var joy1InputPosY = document.getElementById("joy1PosizioneY");
	var joy1Direzione = document.getElementById("joy1Direzione");
	var joy1X = document.getElementById("joy1X");
	var joy1Y = document.getElementById("joy1Y");

	// Create JoyStick object into the DIV 'joy1Div'
	var Joy1 = new JoyStick('joy1Div', {}, function (stickData) {
		joy1IinputPosX.value = stickData.xPosition;
		joy1InputPosY.value = stickData.yPosition;
		joy1Direzione.value = stickData.cardinalDirection;
		joy1X.value = stickData.x;
		joy1Y.value = stickData.y;

        //if the direction changes, send the new direction to the server
        if (stickData.cardinalDirection === stickData.oldCardinalDirection) return;
        stickData.oldCardinalDirection = stickData.cardinalDirection;
        joystickComponent.invokeMethodAsync('NotifyDirectionChanged', stickData.cardinalDirection);
	});
</script>

@code {
    [Parameter]
    public EventCallback<(JoystickTest, string)> DirectionChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JSRuntime.InvokeVoidAsync("injectBlazorObjectReference", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void NotifyDirectionChanged(string newDirection)
    {
        DirectionChanged.InvokeAsync((this, newDirection));
    }
}

<script>
    var joystickComponent = null;
    function injectBlazorObjectReference(dotnetHelper) {
        joystickComponent = dotnetHelper;
    }
</script>
